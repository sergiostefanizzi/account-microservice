openapi: 3.0.3
info:
  title: Microservices Social Network - Account Microservice
  version: 1.0.11
  description: >-
    Here are written the API definition for a social network based on
    microservices technologies. In particular this is the document relative to the account microservice. This is a master thesis project.
  termsOfService: http://swagger.io/terms/
  contact:
    email: sergio.stefanizzi@finconsgroup.com
    name: Sergio Stefanizzi
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: accounts
    description: All about accounts
  - name: admins
    description: All about admins
paths:
  /accounts:
    post:
      tags:
        - accounts
      summary: Account subscription
      description: Account subscription
      operationId: addAccount
      requestBody:
        description: Account info to be registered
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '201':
          description:  Account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /accounts/{accountId}:
    put:
      tags:
        - accounts
      summary: Account activation
      description: Account activation
      operationId: activateAccountById
      #security:
      #  - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          description: Id of the account to be activated
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        - name: validation_code
          in: query
          description: Validation code of the account to be activated
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      responses:
        '204':
          description: Account has been successfully activated!
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - accounts
      summary: Delete an account
      description: Delete an account
      operationId: deleteAccountById
      #security:
      #  - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          description: Id of the account to be deleted
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      responses:
        '204':
          description: Account has been successfully deleted!
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - accounts
      summary: Update an account
      description: Update name, surname, gender or password of an account
      operationId: updateAccountById
      #security:
      #  - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          description: Id of the account to be updated
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPatch'
      responses:
        '200':
          description: Account has been successfully updated!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /admins/{accountId}:
    put:
      tags:
        - admins
      summary: Create an admin
      description: Create an admin
      operationId: addAdminById
      #security:
      #  - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          description: Id of the account
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      responses:
        '201':
          description: Admin created!
          content:
            application/json:
              schema:
                type: string
                pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - admins
      summary: Remove an admin, account blocking
      description: Remove an admin
      operationId: deleteAdminById
      #security:
      #  - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          description: Id of the account
          required: true
          schema:
            type: string
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      responses:
        '204':
          description: Admin has been successfully removed!
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admins/accounts:
    get:
      tags:
        - admins
      summary: List of all the accounts
      description: List of all the accounts
      operationId: findAllAccounts
      #security:
      #  - bearerAuth: []
      parameters:
        - name: removedAccount
          in: query
          description: Show or not show removed or accounts
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: List of all accounts found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountList'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    BadRequest:
      description: Bad Request! Action not performed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Forbidden'
    Unauthenticated:
      description: Authentication is required!
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Unauthenticated'
    Conflict:
      description: Conflict! Already created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Conflict'
    InternalServerError:
      description: Internal Error Server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'
  schemas:

    Account:
      type: object
      properties:
        id:
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          readOnly: true
          description: Account id
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 320
          #pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          description: Account email, it must be unique
        name:
          type: string
          minLength: 2
          maxLength: 50
          pattern: '^[a-zA-Z]+$'
          description: Name of the account owner
          x-nonnull: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)'
        surname:
          type: string
          minLength: 2
          maxLength: 50
          pattern: '^[a-zA-Z]+$'
          description: Surname of the account owner
          x-nonnull: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)'
        birthdate:
          type: string
          format: date
          x-adult: '@Adult'
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER]
          description: Gender of the account owner
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 255
          pattern: '^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$'
          writeOnly: true
          description: Account Password
          x-nonnull: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)'
      required:
        - email
        - birthdate
        - gender
        - password


    AccountPatch:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
          pattern: '^[a-zA-Z]+$'
          description: Name of the account owner
        surname:
          type: string
          minLength: 2
          maxLength: 50
          pattern: '^[a-zA-Z]+$'
          description: Surname of the account owner
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER]
          description: Gender of the account owner
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 255
          pattern: '^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$'
          writeOnly: true
          description: Account Password


    Admin:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          readOnly: true
          description: Admin account id
      required:
        - id

    AccountList:
      type: array
      items:
        $ref: '#/components/schemas/Account'
      description: List of accounts

    Error:
      type: object
      properties:
        error:
          type: string
          minLength: 1
          description: Error description
          example: Error description

    ErrorList:
      type: array
      items:
        $ref: '#/components/schemas/Error'
      description: List of errors


    Unauthenticated:
      type: object
      properties:
        error:
          type: string
          minLength: 3
          example: Authentication is required!
    #Action is unauthenticated
    Forbidden:
      type: object
      properties:
        error:
          type: string
          minLength: 3
          example: Action is forbidden!


    NotFound:
      type: object
      properties:
        error:
          type: string
          minLength: 3
          example: The specified resource was not found!

    Conflict:
      type: object
      properties:
        error:
          type: string
          minLength: 3
          example: Resource already created!

    InternalServerError:
      type: object
      properties:
        error:
          type: string
          minLength: 3
          example: Internal Server Error


  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT